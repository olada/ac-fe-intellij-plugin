{
    parserClass="de.cofinpro.intellij.acfeplugin.parser.FormulaEngineParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="FormulaEngine"
    psiImplClassSuffix="Impl"
    psiPackage="de.cofinpro.intellij.acfeplugin.psi"
    psiImplPackage="de.cofinpro.intellij.acfeplugin.psi.impl"

    elementTypeHolderClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementTypes"
    elementTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineElementType"
    tokenTypeClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEngineTokenType"

    psiImplUtilClass="de.cofinpro.intellij.acfeplugin.psi.FormulaEnginePsiImplUtil"

    tokens = [
            LEFT_PARENTHESIS = '('
            RIGHT_PARENTHESIS = ')'
            LEFT_CURLY_BRACE = '{'
            RIGHT_CURLY_BRACE = '}'
            LEFT_BRACKET = '['
            RIGHT_BRACKET = ']'

            OPERATOR_ADDASSIGNMENT = '+='
            OPERATOR_ASSIGNMENT = '='
            OPERATOR_AND = '&&'
            OPERATOR_DECREMENT = '--'
            OPERATOR_DIVIDE = '/'
            OPERATOR_DIVIDEASSIGNMENT = '/='
            OPERATOR_EQUAL = '=='
            OPERATOR_GREATERTHAN = '>'
            OPERATOR_GREATERTHANEQUAL = '>='
            OPERATOR_INCREMENT = '++'
            OPERATOR_LESSTHAN = '<'
            OPERATOR_LESSTHANEQUAL = '<='
            OPERATOR_MINUS = '-'
            OPERATOR_MODULO = '%'
            OPERATOR_MODULOASSIGNMENT = '%='
            OPERATOR_MULTIPLY = '*'
            OPERATOR_MULTIPLYASSIGNMENT = '*='
            OPERATOR_NEGATION = '!'
            OPERATOR_NOTEQUAL = '!='
            OPERATOR_OR = '||'
            OPERATOR_PLUS = '+'
            OPERATOR_POWER = '^'
            OPERATOR_SUBTRACTASSIGNMENT = '-='

            KEYWORD_AND = 'and'
            KEYWORD_BREAK = 'break'
            KEYWORD_CASE = 'case'
            KEYWORD_CONTINUE = 'continue'
            KEYWORD_DEFAULT = 'default'
            KEYWORD_DO = 'do'
            KEYWORD_ELSE = 'else'
            KEYWORD_FOR = 'for'
            KEYWORD_FUNCTION = 'function'
            KEYWORD_IF = 'if'
            KEYWORD_OR = 'or'
            KEYWORD_RETURN = 'return'
            KEYWORD_SEQ = 'seq'
            KEYWORD_SWITCH = 'switch'
            KEYWORD_WHILE = 'while'

            KEYWORD_ANY = 'any'
            KEYWORD_BOOLEAN = 'bool'
            KEYWORD_DATE = 'date'
            KEYWORD_DATETIME = 'datetime'
            KEYWORD_DICT = 'dict'
            KEYWORD_FLOAT = 'float'
            KEYWORD_INTEGER = 'integer'
            KEYWORD_LIST = 'list'
            KEYWORD_NUMBER = 'number'
            KEYWORD_STRING = 'string'
            KEYWORD_TIME = 'time'

            VISIBILITY_GLOBAL = 'global'
            VISIBILITY_LOCAL = 'local'

            BUILT_IN_VAR_NA = '$NA'
            BUILT_IN_VAR_TODAY = '$TODAY'
            BUILT_IN_VAR_TIMETODAY = '$TIMETODAY'
            BUILT_IN_VAR_SYMBOL = '$SYMBOL'
            BUILT_IN_VAR_NAME = '$NAME'
            BUILT_IN_VAR_PROCESSED = '$PROCESSED'
            BUILT_IN_VAR_PASSED = '$PASSED'
            BUILT_IN_VAR_LISTID = '$LISTID'
            BUILT_IN_VAR_LISTTP = '$LISTTP'
            BUILT_IN_VAR_TREEID = '$TREEID'
            BUILT_IN_VAR_FIELD = '$FIELD'
            BUILT_IN_VAR_FIELDS = '$FIELDS'
            BUILT_IN_VAR_DATA = '$DATA'
            BUILT_IN_VAR_DATETIME = '$DATETIME'
            BUILT_IN_VAR_STATUS = '$STATUS'
            BUILT_IN_VAR_DEPENDENCIES = '$DEPENDENCIES'
            BUILT_IN_VAR_DEPENDENCIES_TRIGGERS = '$DEPENDENCIES_TRIGGERS'

            BUILT_IN_FUNC_ADO_BROWSR = 'built in func ado_browse'
            BUILT_IN_FUNC_ATTRIBUTE = 'attribute'
            BUILT_IN_FUNC_BSEARCH = 'built in func bsearch'
            BUILT_IN_FUNC_BOOL = 'built in func bool'
            BUILT_IN_FUNC_CORRECT_PRIZE_FIELD = 'built in func correct_price_field'
            BUILT_IN_FUNC_DATE = 'date'
            BUILT_IN_FUNC_DATETIME = 'datetime'
            BUILT_IN_FUNC_DAYDIFF = 'daydiff'
            BUILT_IN_FUNC_DAYPLUS = 'dayplus'
            BUILT_IN_FUNC_DICT = 'dict'
            BUILT_IN_FUNC_DICT_GET ="built in func dict_get"
            BUILT_IN_FUNC_DICT_ISKEY = 'built in func dict_iskey'
            BUILT_IN_FUNC_DICT_KEYS = 'built in func dict_keys'
            BUILT_IN_FUNC_DICT_PUT = 'built in func dict_put'
            BUILT_IN_FUNC_DICT_VALUES = 'built in func dict_values'
            BUILT_IN_FUNC_ELT = 'elt'
            BUILT_IN_FUNC_EVALUATE = 'built in func evaluate'
            BUILT_IN_FUNC_FIRST = 'first'
            BUILT_IN_FUNC_FLOAT = 'float'
            BUILT_IN_FUNC_HASH_GET = 'hash_get'
            BUILT_IN_FUNC_HASH_GLOBAL = 'built in func hash_global'
            BUILT_IN_FUNC_HASH_ISKEY = 'hash_iskey'
            BUILT_IN_FUNC_HASH_KEYS = 'hash_keys'
            BUILT_IN_FUNC_HASH_PUT = 'hash_put'
            BUILT_IN_FUNC_INSERT = 'built in func insert'
            BUILT_IN_FUNC_INTEGER = 'built in func integer'
            BUILT_IN_FUNC_IS_DATE = 'built in func is_date'
            BUILT_IN_FUNC_IS_DATETIME = 'built in func is_datetime'
            BUILT_IN_FUNC_IS_FLOAT = 'built in func is_float'
            BUILT_IN_FUNC_IS_INTEGER = 'built in func is_integer'
            BUILT_IN_FUNC_IS_LIST = 'is_list'
            BUILT_IN_FUNC_IS_MATRIX = 'built in func is_matrix'
            BUILT_IN_FUNC_IS_NA = 'is_na'
            BUILT_IN_FUNC_IS_NUMBER = 'built in func is_number'
            BUILT_IN_FUNC_IS_OPAQUE = ' built in func is_opaque'
            BUILT_IN_FUNC_IS_STRING = 'is_string'
            BUILT_IN_FUNC_IS_TIME = 'built in func is_time'
            BUILT_IN_FUNC_KERNEL = 'kernel'
            BUILT_IN_FUNC_LAST = 'last'
            BUILT_IN_FUNC_LEN = 'len'
            BUILT_IN_FUNC_LIST = 'list'
            BUILT_IN_FUNC_LSEARCH = 'lsearch'
            BUILT_IN_FUNC_LOAD = 'load'
            BUILT_IN_FUNC_MAP = 'map'
            BUILT_IN_FUNC_MAX = 'max'
            BUILT_IN_FUNC_OUT = 'out'
            BUILT_IN_FUNC_PRICE_FIELD = 'price_field'
            BUILT_IN_FUNC_RDBMS_PROC = 'built in func rdbms_proc'
            BUILT_IN_FUNC_REGEX_MATCH = 'built in func regex_match'
            BUILT_IN_FUNC_REMOVE = 'remove'
            BUILT_IN_FUNC_SECOND = 'built in func second'
            BUILT_IN_FUNC_SET_SUSPECT_PRICE_FIELD = ' built in func set_suspect_price_field'
            BUILT_IN_FUNC_SQL = 'sql'
            BUILT_IN_FUNC_SORT = 'sort'
            BUILT_IN_FUNC_SPLIT ='built in func split'
            BUILT_IN_FUNC_STATUS = 'status'
            BUILT_IN_FUNC_STR = 'str'
            BUILT_IN_FUNC_STRING = 'built in func string'
            BUILT_IN_FUNC_STRIP = 'built in func strip'
            BUILT_IN_FUNC_STRVAL = 'built in func strval'
            BUILT_IN_FUNC_TIME = 'built in func time'
            BUILT_IN_FUNC_TOUPPER = 'built in func toupper'
            BUILT_IN_FUNC_TS = 'built in func ts'
            BUILT_IN_FUNC_TS_UPDATE = 'built in func ts_update'
            BUILT_IN_FUNC_YEAR_FRACTION = 'built in func year_fraction'

            DOUBLE_QUOTED_STRING_LITERAL = 'double quoted string literal'
            SINGLE_QUOTED_STRING_LITERAL = 'single quoted string literal'
            DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
            SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

            COMMA = ','
            COLON = ':'
            SEMICOLON = ';'
            QUESIONMARK = '?'

            IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
            WHITE_SPACE = 'regexp:\s+'

            NUMBER_SCIENTIFIC = 'regexp:[0-9]+\.[0-9]+(E\d+)'
            NUMBER_FLOAT = 'regexp:[0-9]+\.[0-9]*'
            NUMBER_INTEGER = 'regexp:[0-9]+'
    ]

      extends(".*Expression")=Expression
}

feFile ::= Statement*

FunctionDefinition ::= KEYWORD_FUNCTION IDENTIFIER LEFT_PARENTHESIS FunctionParameters? RIGHT_PARENTHESIS LEFT_CURLY_BRACE FunctionBody RIGHT_CURLY_BRACE {
    implements = ["de.cofinpro.intellij.acfeplugin.psi.FormulaEngineNameIdentifierOwner" "com.intellij.psi.StubBasedPsiElement<de.cofinpro.intellij.acfeplugin.psi.stub.FunctionDefinitionStub>"]
    stubClass = "de.cofinpro.intellij.acfeplugin.psi.stub.FunctionDefinitionStub"
    elementTypeClass = "de.cofinpro.intellij.acfeplugin.psi.stub.FunctionDefinitionElementType"
    methods = [  getInnerFunctionDefinitions getName getTextOffset setName ]
}
FunctionParameters ::= FunctionParameter (COMMA FunctionParameter)*
FunctionParameter ::= ParameterWithType | ParameterWithoutType {
    implements = ["de.cofinpro.intellij.acfeplugin.psi.FormulaEngineNameIdentifierOwner"]
    methods = [ getName getTextOffset setName ]
}
private ParameterWithoutType ::= IdentifierLiteral
private ParameterWithType ::= Type IdentifierLiteral

FunctionArguments ::= FunctionArgument (COMMA FunctionArgument)*
FunctionArgument ::= Expression

// Control Structures
ControlStructure ::= While | For | DoWhile | If | Switch
ControlStructureBody ::= (ControlStructure | Statement)*

While ::= KEYWORD_WHILE LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE ControlStructureBody RIGHT_CURLY_BRACE
Switch ::= KEYWORD_SWITCH LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS LEFT_CURLY_BRACE (KEYWORD_CASE Constant COLON (ControlStructureBody (KEYWORD_BREAK SEMICOLON)?))* (KEYWORD_DEFAULT COLON (ControlStructureBody (KEYWORD_BREAK SEMICOLON)?))? RIGHT_CURLY_BRACE
DoWhile ::= KEYWORD_DO LEFT_CURLY_BRACE ControlStructureBody RIGHT_CURLY_BRACE KEYWORD_WHILE LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS SEMICOLON

// Expressions
Expression ::= NegatedExpression
    | ParenthesisExpression
    | CombinationExpression
    | ComparisonExpression
    | CalculationExpression
    | ShortIfExpression
    | LeafExpression
    | UnaryExpression
NegatedExpression ::= OPERATOR_NEGATION Expression
CombinationExpression ::= Expression CombinationOperator Expression
ComparisonExpression ::= Expression ComparisonOperator Expression
CalculationExpression ::= Expression CalculationOperator Expression
ShortIfExpression ::= Expression QUESIONMARK Expression COLON Expression
LeafExpression ::= FunctionInvocation | ArrayAccess | Constant |  MethodReference | PrefixOperator IdentifierLiteral | IdentifierLiteral PostfixOperator | IdentifierLiteral {
    methods = [ getReference ]
}
ParenthesisExpression ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS
UnaryExpression ::= UnaryOperator Expression

private CombinationOperator ::= OPERATOR_AND | OPERATOR_OR | KEYWORD_AND | KEYWORD_OR
private ComparisonOperator ::= OPERATOR_EQUAL | OPERATOR_NOTEQUAL | OPERATOR_GREATERTHANEQUAL | OPERATOR_GREATERTHAN | OPERATOR_LESSTHANEQUAL | OPERATOR_LESSTHAN
private CalculationOperator ::= OPERATOR_MODULO | OPERATOR_PLUS | OPERATOR_MINUS | OPERATOR_MULTIPLY | OPERATOR_DIVIDE | OPERATOR_POWER
private PostfixOperator ::= OPERATOR_INCREMENT | OPERATOR_DECREMENT
private PrefixOperator ::= OPERATOR_INCREMENT | OPERATOR_DECREMENT
private AssignmentOperator ::= OPERATOR_ADDASSIGNMENT | OPERATOR_SUBTRACTASSIGNMENT | OPERATOR_MULTIPLYASSIGNMENT | OPERATOR_DIVIDEASSIGNMENT | OPERATOR_MODULOASSIGNMENT | OPERATOR_ASSIGNMENT
private DeclarationOperator ::= OPERATOR_ASSIGNMENT
private UnaryOperator ::= OPERATOR_PLUS | OPERATOR_MINUS

NumberLiteral ::= NUMBER_SCIENTIFIC | NUMBER_FLOAT | NUMBER_INTEGER
StringLiteral ::= SingleStringLiteral (OPERATOR_PLUS Expression)* | SingleStringLiteral (OPERATOR_PLUS SingleStringLiteral)*
SingleStringLiteral ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
ListLiteral ::= LEFT_BRACKET ListContents RIGHT_BRACKET
ListContents ::= (Expression (COMMA Expression)*)?
IdentifierLiteral ::= IDENTIFIER | Type {
    methods = [ getReference ]
}

FunctionInvocation ::= FunctionName LEFT_PARENTHESIS FunctionArguments? RIGHT_PARENTHESIS {
    methods = [ getReference isCustomFunction ]
}
private CustomFunctionName ::= IDENTIFIER

private FunctionName ::= BuiltInFunctionName | CustomFunctionName
private MethodReference ::= FunctionName // just for sake of better naming

BuiltInFunctionName ::= BUILT_IN_FUNC_ADO_BROWSE
    | BUILT_IN_FUNC_ATTRIBUTE
    | BUILT_IN_FUNC_BSEARCH
    | BUILT_IN_FUNC_CORRECT_PRICE_FIELD
    | BUILT_IN_FUNC_DATE | BUILT_IN_FUNC_DATETIME
    | BUILT_IN_FUNC_DICT | BUILT_IN_FUNC_DICT_GET | BUILT_IN_FUNC_DICT_ISKEY
    | BUILT_IN_FUNC_DICT_KEYS | BUILT_IN_FUNC_DICT_PUT | BUILT_IN_FUNC_DICT_VALUES
    | BUILT_IN_FUNC_STR | BUILT_IN_FUNC_FLOAT | BUILT_IN_FUNC_INTEGER | BUILT_IN_FUNC_LIST | BUILT_IN_FUNC_STRING | BUILT_IN_FUNC_BOOL
    | BUILT_IN_FUNC_DAYDIFF | BUILT_IN_FUNC_DAYPLUS
    | BUILT_IN_FUNC_ELT
    | BUILT_IN_FUNC_EVALUATE
    | BUILT_IN_FUNC_FIRST
    | BUILT_IN_FUNC_HASH_GET | BUILT_IN_FUNC_HASH_GLOBAL | BUILT_IN_FUNC_HASH_PUT | BUILT_IN_FUNC_HASH_ISKEY | BUILT_IN_FUNC_HASH_KEYS
    | BUILT_IN_FUNC_INSERT
    | BUILT_IN_FUNC_IS_DATE | BUILT_IN_FUNC_IS_DATETIME | BUILT_IN_FUNC_IS_FLOAT | BUILT_IN_FUNC_IS_INTEGER | BUILT_IN_FUNC_IS_LIST
    | BUILT_IN_FUNC_IS_MATRIX | BUILT_IN_FUNC_IS_NA | BUILT_IN_FUNC_IS_NUMBER | BUILT_IN_FUNC_IS_OPAQUE | BUILT_IN_FUNC_IS_STRING
    | BUILT_IN_FUNC_IS_TIME
    | BUILT_IN_FUNC_KERNEL
    | BUILT_IN_FUNC_LAST
    | BUILT_IN_FUNC_LEN
    | BUILT_IN_FUNC_LOAD
    | BUILT_IN_FUNC_LSEARCH
    | BUILT_IN_FUNC_PRICE_FIELD
    | BUILT_IN_FUNC_MAP
    | BUILT_IN_FUNC_MAX
    | BUILT_IN_FUNC_OUT
    | BUILT_IN_FUNC_RDBMS_PROC
    | BUILT_IN_FUNC_REGEX_MATCH
    | BUILT_IN_FUNC_REMOVE
    | BUILT_IN_FUNC_SECOND
    | BUILT_IN_FUNC_SET_SUSPECT_PRICE_FIELD
    | BUILT_IN_FUNC_SQL
    | BUILT_IN_FUNC_SORT
    | BUILT_IN_FUNC_SPLIT
    | BUILT_IN_FUNC_STATUS
    | BUILT_IN_FUNC_STRIP
    | BUILT_IN_FUNC_STRVAL
    | BUILT_IN_FUNC_TIME
    | BUILT_IN_FUNC_TOUPPER
    | BUILT_IN_FUNC_TS
    | BUILT_IN_FUNC_TS_UPDATE
    | BUILT_IN_FUNC_YEAR_FRACTION
FunctionBody ::= Statement*
private RegularStatementWithoutSemicolon ::= Assignment | Declaration | Expression | ReturnStatement | Seq | KEYWORD_BREAK | KEYWORD_CONTINUE {
    recoverWhile = RecoverUntilSemicolon
}
private RecoverUntilSemicolon ::= !(SEMICOLON)
private RegularStatement ::= RegularStatementWithoutSemicolon SEMICOLON
Statement ::= FunctionDefinition | ControlStructure | RegularStatement {
    methods = [ isDeclaration ]
}

SeqForParenthesis ::= LEFT_PARENTHESIS Assignment (COMMA (Assignment | FunctionInvocation))* SEMICOLON Expression SEMICOLON (Assignment | FunctionInvocation) RIGHT_PARENTHESIS
Seq ::= KEYWORD_SEQ SeqForParenthesis SeqBody
For ::= KEYWORD_FOR SeqForParenthesis (ControlStructure | Statement) | (LEFT_CURLY_BRACE ControlStructureBody RIGHT_CURLY_BRACE)
If ::= KEYWORD_IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS IfOrElseBlock (KEYWORD_ELSE KEYWORD_IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS IfOrElseBlock)* (KEYWORD_ELSE IfOrElseBlock)?
IfOrElseBlock ::= LEFT_CURLY_BRACE ControlStructureBody RIGHT_CURLY_BRACE | ControlStructureBody
private SeqBody ::= Assignment | CalculationExpression | FunctionInvocation | ListLiteral | BuiltInVariableName

Declaration ::= (FullDeclaration | DeclarationWithoutType) DeclarationInitialization? {
    implements = ["de.cofinpro.intellij.acfeplugin.psi.FormulaEngineNameIdentifierOwner" "com.intellij.psi.StubBasedPsiElement<de.cofinpro.intellij.acfeplugin.psi.stub.DeclarationStub>"]
    stubClass = "de.cofinpro.intellij.acfeplugin.psi.stub.DeclarationStub"
    elementTypeClass = "de.cofinpro.intellij.acfeplugin.psi.stub.DeclarationElementType"
    methods = [ getName getTextOffset setName ]
}
private DeclarationInitialization ::= DeclarationOperator SeqOrExpression { pin = 1 }
private SeqOrExpression ::= Seq | Expression
private FullDeclaration ::= Visibility Type IdentifierLiteral
private DeclarationWithoutType ::= Visibility IdentifierLiteral
Assignment ::=  RegularAssignment | IdentifierLiteral PostfixOperator | PrefixOperator IdentifierLiteral | OPERATOR_MINUS IdentifierLiteral
private RegularAssignment ::= LeftHandSide AssignmentOperator (Seq | Expression) { pin = 2 }
private LeftHandSide ::= ArrayAccess | BuiltInVariableName | IdentifierLiteral

ArrayAccess ::= (BuiltInVariableName | IdentifierLiteral) (LEFT_BRACKET Expression RIGHT_BRACKET)+ {
methods = [ getReference ]
}

ReturnStatement ::= KEYWORD_RETURN Expression?

Visibility ::= VISIBILITY_GLOBAL | VISIBILITY_LOCAL
Type ::= KEYWORD_ANY
    | KEYWORD_BOOLEAN
    | KEYWORD_DATE
    | KEYWORD_DATETIME
    | KEYWORD_DICT
    | KEYWORD_FLOAT
    | KEYWORD_INTEGER
    | KEYWORD_LIST
    | KEYWORD_NUMBER
    | KEYWORD_STRING
    | KEYWORD_TIME

Constant ::= BuiltInVariableName | NumberLiteral | StringLiteral | ListLiteral
BuiltInVariableName ::= BUILT_IN_VAR_NA
                        | BUILT_IN_VAR_TODAY
                        | BUILT_IN_VAR_TIMETODAY
                        | BUILT_IN_VAR_SYMBOL
                        | BUILT_IN_VAR_NAME
                        | BUILT_IN_VAR_PROCESSED
                        | BUILT_IN_VAR_PASSED
                        | BUILT_IN_VAR_LISTID
                        | BUILT_IN_VAR_LISTTP
                        | BUILT_IN_VAR_TREEID
                        | BUILT_IN_VAR_FIELD
                        | BUILT_IN_VAR_FIELDS
                        | BUILT_IN_VAR_DATA
                        | BUILT_IN_VAR_DATETIME
                        | BUILT_IN_VAR_STATUS
                        | BUILT_IN_VAR_DEPENDENCIES
                        | BUILT_IN_VAR_DEPENDENCIES_TRIGGERS
